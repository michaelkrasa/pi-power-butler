[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pi-power-butler"
version = "0.1.0"
description = "Python service for optimizing home energy flows using rule-based logic and MCP"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.11"
authors = [
    {name = "Michael Krasa", email = "michael@example.com"},
]
keywords = ["energy", "optimization", "solar", "battery", "tesla", "alphaess", "raspberry-pi"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
]

dependencies = [
    "fastmcp>=0.1.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "APScheduler>=3.10.0",
    "structlog>=23.0.0",
    "numpy>=2.3.1",
    "openmeteo-requests>=1.5.0",
    "pandas>=2.3.1",
    "requests-cache>=1.2.1",
    "retry-requests>=2.0.0",
    "aiofiles>=23.0.0",
    "httpx>=0.25.0",
    "pytz>=2023.3",
    "backoff>=2.2.1",
    "matplotlib>=3.8.0",
    "python-telegram-bot[ext]>=20.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/michaelkrasa/pi-power-butler"
Repository = "https://github.com/michaelkrasa/pi-power-butler"
Issues = "https://github.com/michaelkrasa/pi-power-butler/issues"

[project.scripts]
pi-power-butler = "src.main:main"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]
